	Полное описание Server
    Данная статья рассматривает полное описание автономного сервера *BilSrvStation* на *Linux Debian10*
by |author|. Основаня идея заключается в том, что бы обеспечить документирвоание 
реального сервера/рабочего места, после "чистой", автоматической установки со всеми необходимыми настройками 
и программами. В начале описывается структура файлов для формирования загрузочного диска, далее следует полное
описание скриптового `*pii2.sh*` без 
:important!!! Перед установкой обязательно ознакомится с данной страницей!!!
:attention!!! Здесь и далее, дополнительный софт будет дополняться в файле pii2.sh, в разделе `01.12	Optional soft`, при этом описание будет дополняться в данной странице в разделе 'Опциональный софт`
	 
        Основные возможности
        
        - Сервер предварительно настроен предустановочным файлом '*preseed.cfg*'
        - Не требуется вручную настраивать и конфигурировать пакеты
        - Сервер защищён пакетом SELinux с настроенными политиками
        - Локаничное описание, позволяющее сэкономить время на освоение
        - Установленные все полезные утилиты, необходимые для удобного администрирования
		- Данная установка универсальная для широкого спектра задач

		Описание структуры сервера
    Структура сервера состоит из следующих папок и файлов.
	
		Разбор основного файла `*pii2.sh*'
    Код начинается с функции `*jumpto*`, которая обеспечивает переход по меткам '*GOTO*'. В роли метки служит её объявление
'*<name>=${<number>:-"<name>"}*'. Где `*<name>*` - название метки GOTO, <number> - номер метки. Т.е. переменной <name> присваивается структура из наименования
метки с соответствующему номеру. После объявление метки в коде она используется '*<number>:*', а её вызов осуществляется через '*jumpto $<name>*'.
Данная функция `*jumpto*` принимает два аргумента '*$0*' и '*$1*', которые соответствуют имени файла и названия метки.
Рассмотрим строчку функции::

	'*cmd=$(sed -n "/$label:/{:a;n;p;ba};" $0 | grep -v ':$')*'. 
	
В документации в разделе '*6.4 Branching and Flow Control*' `SEDERE <https://www.gnu.org/software/sed/manual/sed.html>`_ указана адресация::

	'[addr]X'
	'[addr]{ X ; X ; X }'
	'/regexp/X'
	'/regexp/{ X ; X ; X }'

``Addresses and regular expressions can be used as an if/then conditional: If [addr] matches the current pattern space, execute 
the command(s). For example: The command /^#/d means: if the current pattern matches the regular expression ^# (a line starting with a hash), then execute 
the d command: delete the line without printing it, and restart the program cycle immediately.``

Эта запись говорит о том, что в фигурных скобках каждая команда (оператор) выполняется последовательно, при условии, если выполняется предыдущая.
Краткое описание опреторов:
- `*:a*` метка
- `*-bX*`  ``branch unconditionally (that is: always jump to a label, skipping or repeating other commands, without restarting a new cycle).``. Это
означает, что некандиционная ветвь, которая переходит на метку, пропуская или повторяя другую команду без возможности перезапуска и переходит на метку `X`
- `*-n*`   ``commands first prints the content of the pattern space, empties the pattern space then reads the next input line. This command is useful to skip lines (e.g. process every Nth line).``
Эта команда пропускает строку
- `*-Xp*`   команда вывода строки Xp. Где X - омер строки. 
- `*grep -v*`	``Invert the sense of matching, to select non-matching lines.``. Инвертирует чувствительность совпадений
- `*:$*`	метка ``label`` в конце
- `*eval*`

..ch 0
..ch 1
..ch 3
..ch 4
..ch 5

		Python String Comparison operators
		
In python language, we can compare two strings such as identify whether the two strings are equivalent to each other 
or not, or even which string is greater or smaller than each other. Let us check some of the string comparison operator 
used for this purpose below:
..ch 3

==: This operator checks whether two strings are equal.
!=: This operator checks whether two strings are not equal.
<: This operator checks whether the string on the left side is smaller than the string on the right side.
<=: This operator checks whether the string on the left side is smaller or equal to the string on the right side.
>: This operator checks whether the string on the left side is greater than the string on the right side.
>=: This operator checks whether the string on the left side is greater than the string on the right side.
..ch400